# Generated from lde_lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,63,445,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,4,5,160,8,5,11,5,12,5,
        161,1,5,1,5,4,5,166,8,5,11,5,12,5,167,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,
        30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,
        37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
        41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,
        44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
        48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,
        52,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,
        56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,5,59,413,
        8,59,10,59,12,59,416,9,59,1,60,4,60,419,8,60,11,60,12,60,420,1,60,
        1,60,4,60,425,8,60,11,60,12,60,426,3,60,429,8,60,1,61,1,61,1,61,
        1,61,5,61,435,8,61,10,61,12,61,438,9,61,1,61,1,61,1,62,1,62,1,62,
        1,62,0,0,63,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,1,
        0,6,4,0,47,57,65,90,95,95,97,122,3,0,48,57,65,90,97,122,2,0,65,90,
        97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,452,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
        0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
        0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,127,1,0,0,0,3,131,1,
        0,0,0,5,137,1,0,0,0,7,142,1,0,0,0,9,150,1,0,0,0,11,157,1,0,0,0,13,
        171,1,0,0,0,15,182,1,0,0,0,17,193,1,0,0,0,19,195,1,0,0,0,21,197,
        1,0,0,0,23,202,1,0,0,0,25,211,1,0,0,0,27,221,1,0,0,0,29,234,1,0,
        0,0,31,250,1,0,0,0,33,260,1,0,0,0,35,268,1,0,0,0,37,270,1,0,0,0,
        39,272,1,0,0,0,41,274,1,0,0,0,43,276,1,0,0,0,45,278,1,0,0,0,47,280,
        1,0,0,0,49,282,1,0,0,0,51,286,1,0,0,0,53,290,1,0,0,0,55,294,1,0,
        0,0,57,299,1,0,0,0,59,304,1,0,0,0,61,309,1,0,0,0,63,314,1,0,0,0,
        65,319,1,0,0,0,67,324,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,73,330,
        1,0,0,0,75,332,1,0,0,0,77,336,1,0,0,0,79,340,1,0,0,0,81,343,1,0,
        0,0,83,348,1,0,0,0,85,353,1,0,0,0,87,359,1,0,0,0,89,361,1,0,0,0,
        91,363,1,0,0,0,93,366,1,0,0,0,95,369,1,0,0,0,97,372,1,0,0,0,99,375,
        1,0,0,0,101,379,1,0,0,0,103,382,1,0,0,0,105,386,1,0,0,0,107,388,
        1,0,0,0,109,390,1,0,0,0,111,394,1,0,0,0,113,400,1,0,0,0,115,406,
        1,0,0,0,117,408,1,0,0,0,119,410,1,0,0,0,121,418,1,0,0,0,123,430,
        1,0,0,0,125,441,1,0,0,0,127,128,5,118,0,0,128,129,5,97,0,0,129,130,
        5,114,0,0,130,2,1,0,0,0,131,132,5,119,0,0,132,133,5,114,0,0,133,
        134,5,105,0,0,134,135,5,116,0,0,135,136,5,101,0,0,136,4,1,0,0,0,
        137,138,5,112,0,0,138,139,5,108,0,0,139,140,5,111,0,0,140,141,5,
        116,0,0,141,6,1,0,0,0,142,143,5,101,0,0,143,144,5,120,0,0,144,145,
        5,116,0,0,145,146,5,114,0,0,146,147,5,97,0,0,147,148,5,99,0,0,148,
        149,5,116,0,0,149,8,1,0,0,0,150,151,5,101,0,0,151,152,5,120,0,0,
        152,153,5,112,0,0,153,154,5,111,0,0,154,155,5,114,0,0,155,156,5,
        116,0,0,156,10,1,0,0,0,157,159,5,39,0,0,158,160,7,0,0,0,159,158,
        1,0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,
        1,0,0,0,163,165,5,46,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,167,
        1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,
        5,39,0,0,170,12,1,0,0,0,171,172,5,114,0,0,172,173,5,101,0,0,173,
        174,5,103,0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,115,
        0,0,177,178,5,115,0,0,178,179,5,105,0,0,179,180,5,111,0,0,180,181,
        5,110,0,0,181,14,1,0,0,0,182,183,5,99,0,0,183,184,5,108,0,0,184,
        185,5,97,0,0,185,186,5,115,0,0,186,187,5,115,0,0,187,188,5,105,0,
        0,188,189,5,102,0,0,189,190,5,105,0,0,190,191,5,101,0,0,191,192,
        5,114,0,0,192,16,1,0,0,0,193,194,5,82,0,0,194,18,1,0,0,0,195,196,
        5,67,0,0,196,20,1,0,0,0,197,198,5,115,0,0,198,199,5,105,0,0,199,
        200,5,122,0,0,200,201,5,101,0,0,201,22,1,0,0,0,202,203,5,98,0,0,
        203,204,5,97,0,0,204,205,5,114,0,0,205,206,5,95,0,0,206,207,5,112,
        0,0,207,208,5,108,0,0,208,209,5,111,0,0,209,210,5,116,0,0,210,24,
        1,0,0,0,211,212,5,104,0,0,212,213,5,105,0,0,213,214,5,115,0,0,214,
        215,5,116,0,0,215,216,5,111,0,0,216,217,5,103,0,0,217,218,5,114,
        0,0,218,219,5,97,0,0,219,220,5,109,0,0,220,26,1,0,0,0,221,222,5,
        115,0,0,222,223,5,99,0,0,223,224,5,97,0,0,224,225,5,116,0,0,225,
        226,5,116,0,0,226,227,5,101,0,0,227,228,5,114,0,0,228,229,5,95,0,
        0,229,230,5,112,0,0,230,231,5,108,0,0,231,232,5,111,0,0,232,233,
        5,116,0,0,233,28,1,0,0,0,234,235,5,115,0,0,235,236,5,99,0,0,236,
        237,5,97,0,0,237,238,5,116,0,0,238,239,5,116,0,0,239,240,5,101,0,
        0,240,241,5,114,0,0,241,242,5,95,0,0,242,243,5,100,0,0,243,244,5,
        101,0,0,244,245,5,110,0,0,245,246,5,115,0,0,246,247,5,105,0,0,247,
        248,5,116,0,0,248,249,5,121,0,0,249,30,1,0,0,0,250,251,5,108,0,0,
        251,252,5,105,0,0,252,253,5,110,0,0,253,254,5,101,0,0,254,255,5,
        95,0,0,255,256,5,112,0,0,256,257,5,108,0,0,257,258,5,111,0,0,258,
        259,5,116,0,0,259,32,1,0,0,0,260,261,5,104,0,0,261,262,5,101,0,0,
        262,263,5,97,0,0,263,264,5,116,0,0,264,265,5,109,0,0,265,266,5,97,
        0,0,266,267,5,112,0,0,267,34,1,0,0,0,268,269,5,43,0,0,269,36,1,0,
        0,0,270,271,5,45,0,0,271,38,1,0,0,0,272,273,5,42,0,0,273,40,1,0,
        0,0,274,275,5,47,0,0,275,42,1,0,0,0,276,277,5,37,0,0,277,44,1,0,
        0,0,278,279,5,94,0,0,279,46,1,0,0,0,280,281,5,61,0,0,281,48,1,0,
        0,0,282,283,5,115,0,0,283,284,5,105,0,0,284,285,5,110,0,0,285,50,
        1,0,0,0,286,287,5,99,0,0,287,288,5,111,0,0,288,289,5,115,0,0,289,
        52,1,0,0,0,290,291,5,116,0,0,291,292,5,97,0,0,292,293,5,110,0,0,
        293,54,1,0,0,0,294,295,5,97,0,0,295,296,5,115,0,0,296,297,5,105,
        0,0,297,298,5,110,0,0,298,56,1,0,0,0,299,300,5,97,0,0,300,301,5,
        99,0,0,301,302,5,111,0,0,302,303,5,115,0,0,303,58,1,0,0,0,304,305,
        5,97,0,0,305,306,5,116,0,0,306,307,5,97,0,0,307,308,5,110,0,0,308,
        60,1,0,0,0,309,310,5,115,0,0,310,311,5,105,0,0,311,312,5,110,0,0,
        312,313,5,104,0,0,313,62,1,0,0,0,314,315,5,99,0,0,315,316,5,111,
        0,0,316,317,5,115,0,0,317,318,5,104,0,0,318,64,1,0,0,0,319,320,5,
        116,0,0,320,321,5,97,0,0,321,322,5,110,0,0,322,323,5,104,0,0,323,
        66,1,0,0,0,324,325,5,40,0,0,325,68,1,0,0,0,326,327,5,41,0,0,327,
        70,1,0,0,0,328,329,5,91,0,0,329,72,1,0,0,0,330,331,5,93,0,0,331,
        74,1,0,0,0,332,333,5,97,0,0,333,334,5,100,0,0,334,335,5,100,0,0,
        335,76,1,0,0,0,336,337,5,100,0,0,337,338,5,101,0,0,338,339,5,108,
        0,0,339,78,1,0,0,0,340,341,5,105,0,0,341,342,5,102,0,0,342,80,1,
        0,0,0,343,344,5,101,0,0,344,345,5,108,0,0,345,346,5,115,0,0,346,
        347,5,101,0,0,347,82,1,0,0,0,348,349,5,116,0,0,349,350,5,114,0,0,
        350,351,5,117,0,0,351,352,5,101,0,0,352,84,1,0,0,0,353,354,5,102,
        0,0,354,355,5,97,0,0,355,356,5,108,0,0,356,357,5,115,0,0,357,358,
        5,101,0,0,358,86,1,0,0,0,359,360,5,62,0,0,360,88,1,0,0,0,361,362,
        5,60,0,0,362,90,1,0,0,0,363,364,5,62,0,0,364,365,5,61,0,0,365,92,
        1,0,0,0,366,367,5,60,0,0,367,368,5,61,0,0,368,94,1,0,0,0,369,370,
        5,61,0,0,370,371,5,61,0,0,371,96,1,0,0,0,372,373,5,33,0,0,373,374,
        5,61,0,0,374,98,1,0,0,0,375,376,5,97,0,0,376,377,5,110,0,0,377,378,
        5,100,0,0,378,100,1,0,0,0,379,380,5,111,0,0,380,381,5,114,0,0,381,
        102,1,0,0,0,382,383,5,110,0,0,383,384,5,111,0,0,384,385,5,116,0,
        0,385,104,1,0,0,0,386,387,5,123,0,0,387,106,1,0,0,0,388,389,5,125,
        0,0,389,108,1,0,0,0,390,391,5,102,0,0,391,392,5,111,0,0,392,393,
        5,114,0,0,393,110,1,0,0,0,394,395,5,119,0,0,395,396,5,104,0,0,396,
        397,5,105,0,0,397,398,5,108,0,0,398,399,5,101,0,0,399,112,1,0,0,
        0,400,401,5,98,0,0,401,402,5,114,0,0,402,403,5,101,0,0,403,404,5,
        97,0,0,404,405,5,107,0,0,405,114,1,0,0,0,406,407,5,44,0,0,407,116,
        1,0,0,0,408,409,5,46,0,0,409,118,1,0,0,0,410,414,7,2,0,0,411,413,
        7,1,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,
        1,0,0,0,415,120,1,0,0,0,416,414,1,0,0,0,417,419,7,3,0,0,418,417,
        1,0,0,0,419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,428,
        1,0,0,0,422,424,5,46,0,0,423,425,7,3,0,0,424,423,1,0,0,0,425,426,
        1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,422,
        1,0,0,0,428,429,1,0,0,0,429,122,1,0,0,0,430,436,5,34,0,0,431,435,
        8,4,0,0,432,433,5,92,0,0,433,435,9,0,0,0,434,431,1,0,0,0,434,432,
        1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,439,
        1,0,0,0,438,436,1,0,0,0,439,440,5,34,0,0,440,124,1,0,0,0,441,442,
        7,5,0,0,442,443,1,0,0,0,443,444,6,62,0,0,444,126,1,0,0,0,9,0,161,
        167,414,420,426,428,434,436,1,6,0,0
    ]

class lde_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VAR = 1
    WRITE = 2
    GRAFICAR = 3
    EXTRAER = 4
    EXPORTAR = 5
    ARCHIVO = 6
    REGRESION = 7
    CLASIFICADOR = 8
    ROWS = 9
    COLUMNS = 10
    TAMANO = 11
    BARRASPLOT = 12
    HISTOGRAMA = 13
    SCATTERPLOT = 14
    SCATTERDENS = 15
    LINEASPLOT = 16
    HEATMAP = 17
    SUMA = 18
    RESTA = 19
    MULT = 20
    DIV = 21
    MOD = 22
    EXP = 23
    IGUAL = 24
    SIN = 25
    COS = 26
    TAN = 27
    ASIN = 28
    ACOS = 29
    ATAN = 30
    SINH = 31
    COSH = 32
    TANH = 33
    LPAREN = 34
    RPAREN = 35
    LBRACKET = 36
    RBRACKET = 37
    ADD = 38
    DEL = 39
    IF = 40
    ELSE = 41
    TRUE = 42
    FALSE = 43
    MAYOR = 44
    MENOR = 45
    MAYOR_IGUAL = 46
    MENOR_IGUAL = 47
    IGUALDAD = 48
    DIFERENTE = 49
    AND = 50
    OR = 51
    NOT = 52
    INBLOCK = 53
    ENBLOCK = 54
    FOR = 55
    WHILE = 56
    BREAK = 57
    COMA = 58
    PUNTO = 59
    ID = 60
    NUMERO = 61
    STRING = 62
    ESPACIO = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'write'", "'plot'", "'extract'", "'export'", "'regression'", 
            "'classifier'", "'R'", "'C'", "'size'", "'bar_plot'", "'histogram'", 
            "'scatter_plot'", "'scatter_density'", "'line_plot'", "'heatmap'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'='", "'sin'", "'cos'", 
            "'tan'", "'asin'", "'acos'", "'atan'", "'sinh'", "'cosh'", "'tanh'", 
            "'('", "')'", "'['", "']'", "'add'", "'del'", "'if'", "'else'", 
            "'true'", "'false'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
            "'and'", "'or'", "'not'", "'{'", "'}'", "'for'", "'while'", 
            "'break'", "','", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "VAR", "WRITE", "GRAFICAR", "EXTRAER", "EXPORTAR", "ARCHIVO", 
            "REGRESION", "CLASIFICADOR", "ROWS", "COLUMNS", "TAMANO", "BARRASPLOT", 
            "HISTOGRAMA", "SCATTERPLOT", "SCATTERDENS", "LINEASPLOT", "HEATMAP", 
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "EXP", "IGUAL", "SIN", 
            "COS", "TAN", "ASIN", "ACOS", "ATAN", "SINH", "COSH", "TANH", 
            "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "ADD", "DEL", "IF", 
            "ELSE", "TRUE", "FALSE", "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", 
            "IGUALDAD", "DIFERENTE", "AND", "OR", "NOT", "INBLOCK", "ENBLOCK", 
            "FOR", "WHILE", "BREAK", "COMA", "PUNTO", "ID", "NUMERO", "STRING", 
            "ESPACIO" ]

    ruleNames = [ "VAR", "WRITE", "GRAFICAR", "EXTRAER", "EXPORTAR", "ARCHIVO", 
                  "REGRESION", "CLASIFICADOR", "ROWS", "COLUMNS", "TAMANO", 
                  "BARRASPLOT", "HISTOGRAMA", "SCATTERPLOT", "SCATTERDENS", 
                  "LINEASPLOT", "HEATMAP", "SUMA", "RESTA", "MULT", "DIV", 
                  "MOD", "EXP", "IGUAL", "SIN", "COS", "TAN", "ASIN", "ACOS", 
                  "ATAN", "SINH", "COSH", "TANH", "LPAREN", "RPAREN", "LBRACKET", 
                  "RBRACKET", "ADD", "DEL", "IF", "ELSE", "TRUE", "FALSE", 
                  "MAYOR", "MENOR", "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD", 
                  "DIFERENTE", "AND", "OR", "NOT", "INBLOCK", "ENBLOCK", 
                  "FOR", "WHILE", "BREAK", "COMA", "PUNTO", "ID", "NUMERO", 
                  "STRING", "ESPACIO" ]

    grammarFileName = "lde_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


