# Generated from lde_lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,126,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,4,20,
        111,8,20,11,20,12,20,112,1,20,1,20,4,20,117,8,20,11,20,12,20,118,
        3,20,121,8,20,1,21,1,21,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,1,0,2,1,0,48,57,3,0,9,10,13,13,32,
        32,128,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,
        0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,61,1,
        0,0,0,17,65,1,0,0,0,19,69,1,0,0,0,21,74,1,0,0,0,23,79,1,0,0,0,25,
        84,1,0,0,0,27,89,1,0,0,0,29,94,1,0,0,0,31,99,1,0,0,0,33,101,1,0,
        0,0,35,103,1,0,0,0,37,105,1,0,0,0,39,107,1,0,0,0,41,110,1,0,0,0,
        43,122,1,0,0,0,45,46,5,43,0,0,46,2,1,0,0,0,47,48,5,45,0,0,48,4,1,
        0,0,0,49,50,5,42,0,0,50,6,1,0,0,0,51,52,5,47,0,0,52,8,1,0,0,0,53,
        54,5,37,0,0,54,10,1,0,0,0,55,56,5,94,0,0,56,12,1,0,0,0,57,58,5,115,
        0,0,58,59,5,105,0,0,59,60,5,110,0,0,60,14,1,0,0,0,61,62,5,99,0,0,
        62,63,5,111,0,0,63,64,5,115,0,0,64,16,1,0,0,0,65,66,5,116,0,0,66,
        67,5,97,0,0,67,68,5,110,0,0,68,18,1,0,0,0,69,70,5,97,0,0,70,71,5,
        115,0,0,71,72,5,105,0,0,72,73,5,110,0,0,73,20,1,0,0,0,74,75,5,97,
        0,0,75,76,5,99,0,0,76,77,5,111,0,0,77,78,5,115,0,0,78,22,1,0,0,0,
        79,80,5,97,0,0,80,81,5,116,0,0,81,82,5,97,0,0,82,83,5,110,0,0,83,
        24,1,0,0,0,84,85,5,115,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,88,
        5,104,0,0,88,26,1,0,0,0,89,90,5,99,0,0,90,91,5,111,0,0,91,92,5,115,
        0,0,92,93,5,104,0,0,93,28,1,0,0,0,94,95,5,116,0,0,95,96,5,97,0,0,
        96,97,5,110,0,0,97,98,5,104,0,0,98,30,1,0,0,0,99,100,5,40,0,0,100,
        32,1,0,0,0,101,102,5,41,0,0,102,34,1,0,0,0,103,104,5,91,0,0,104,
        36,1,0,0,0,105,106,5,93,0,0,106,38,1,0,0,0,107,108,5,44,0,0,108,
        40,1,0,0,0,109,111,7,0,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,
        1,0,0,0,112,113,1,0,0,0,113,120,1,0,0,0,114,116,5,46,0,0,115,117,
        7,0,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,
        1,0,0,0,119,121,1,0,0,0,120,114,1,0,0,0,120,121,1,0,0,0,121,42,1,
        0,0,0,122,123,7,1,0,0,123,124,1,0,0,0,124,125,6,21,0,0,125,44,1,
        0,0,0,4,0,112,118,120,1,6,0,0
    ]

class lde_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SUMA = 1
    RESTA = 2
    MULT = 3
    DIV = 4
    MOD = 5
    EXP = 6
    SIN = 7
    COS = 8
    TAN = 9
    ASIN = 10
    ACOS = 11
    ATAN = 12
    SINH = 13
    COSH = 14
    TANH = 15
    LPAREN = 16
    RPAREN = 17
    LBRACKET = 18
    RBRACKET = 19
    COMA = 20
    NUMERO = 21
    ESPACIO = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'sin'", "'cos'", 
            "'tan'", "'asin'", "'acos'", "'atan'", "'sinh'", "'cosh'", "'tanh'", 
            "'('", "')'", "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "EXP", "SIN", "COS", 
            "TAN", "ASIN", "ACOS", "ATAN", "SINH", "COSH", "TANH", "LPAREN", 
            "RPAREN", "LBRACKET", "RBRACKET", "COMA", "NUMERO", "ESPACIO" ]

    ruleNames = [ "SUMA", "RESTA", "MULT", "DIV", "MOD", "EXP", "SIN", "COS", 
                  "TAN", "ASIN", "ACOS", "ATAN", "SINH", "COSH", "TANH", 
                  "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COMA", "NUMERO", 
                  "ESPACIO" ]

    grammarFileName = "lde_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


